 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package ejemplocup;
/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;
   
   action code {:
   /*Aqui podemos cargar dcodigo asociado a las distintas producciones
 gramaticales, se puede poner metodos y atributos
   */
   :}
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
	
	
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
	
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
	   
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
					//System.out.println( "-------------->>>>>>>>>>>>>>>>>>>>>>>"+args[0]);
					
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal           SEMI, OP_SUMA, OP_RESTA, OP_MULT, PARENIZQ, PARENDER ,INT, FLOAT, INICIO, FIN , CHAR ,BOOL ,STRING, DOSPUNTOS,IGUAL, INCREMENTO, COMMAA;
terminal           CERO, corchDER, corchIZQ, llaveDER, llaveIZQ, IF, THEN, ELSE, DO, WHILE, MAY_IGUAL , MENOR_IGUAL, IGUAL_IGUAL, DIFERENT, AND_AND, OR;
terminal Integer   Entero, INTEGERP ,INTEGERR;
terminal Float      NUMFLOAT;
terminal Object IDENTIFICADOR;

//non terminal  programa, sent, sentencia,variablesGlobales, CuerpoPrograma, variableGlobal,tipoVarLocal,declaraciones, usovariables;
non terminal  Object  programa, sent, sentencia,variablesGlobales, CuerpoPrograma, variableGlobal,tipoVarLocal, usovariables;
non terminal Object declaracionVariablesGlobales, conjuntoFunciones, variableGlobal1,variableGlobal2 , tipovariableNUM, vGlobalVector, tipovariableCAD;
non terminal Object vGlobalVectorCAD, funcion1, encabezado, lstDeclaLocales, lstParametros, cuerpo, Parametros, bloqueComandos,controlFlujo ,while_do, do_while;
non terminal Object if_then, if_then_else, expreAritmeticas,OperadorSR,expresionSuma, OPcompuesto,crpOperadoComp,OperadorMD, expresionMult, OPcompuestoMD;
non terminal Object crpOperadoCompMD,expresionesLogicas, oprdrsComparacion;
//non terminal Object     IDENTIFICADOR;

   //GRAMATICA
start with programa;

programa ::= declaracionVariablesGlobales conjuntoFunciones
            | declaracionVariablesGlobales
			| conjuntoFunciones
			|
;

//Se tiene variable global1 y 2 dado que solo se puede inicializar en cero 
// variables de tipo int y float

declaracionVariablesGlobales ::=  declaracionVariablesGlobales variableGlobal1  
                                 |variableGlobal1
								 |declaracionVariablesGlobales variableGlobal2 
                                 |variableGlobal2
                                 |declaracionVariablesGlobales vGlobalVector  
                                 |vGlobalVector
								 |declaracionVariablesGlobales vGlobalVectorCAD  
                                 |vGlobalVectorCAD
;


//conjunto de funciones, como las funciones tienen una parte de declaraciones locales con la
// misma sintaxis que las variables globales, para utilizar las mismas no terminales se coloca aqui
/*-----------------------------------------------------------------------------------------------------------*/

conjuntoFunciones ::= conjuntoFunciones funcion1 
                      | funcion1  

;

funcion1 ::= encabezado  lstDeclaLocales  cuerpo 
             

;

encabezado ::=  tipovariableNUM DOSPUNTOS  IDENTIFICADOR lstParametros
               | tipovariableCAD DOSPUNTOS IDENTIFICADOR lstParametros
			   | tipovariableNUM DOSPUNTOS  IDENTIFICADOR 
               | tipovariableCAD DOSPUNTOS IDENTIFICADOR 
			   
;

lstParametros ::= PARENIZQ Parametros PARENDER
                  |PARENIZQ PARENDER
;

Parametros ::= Parametros tipovariableCAD DOSPUNTOS IDENTIFICADOR COMMAA
               |tipovariableCAD DOSPUNTOS IDENTIFICADOR COMMAA
               | Parametros tipovariableNUM DOSPUNTOS IDENTIFICADOR COMMAA
 			   | tipovariableNUM DOSPUNTOS IDENTIFICADOR COMMAA

;




lstDeclaLocales ::=    lstDeclaLocales variableGlobal1 
                               |variableGlobal1 
							   |lstDeclaLocales variableGlobal2  
                               |variableGlobal2 
							   
                                 
;




cuerpo ::=  llaveIZQ bloqueComandos llaveDER
            |  llaveIZQ llaveDER
;
/*-----------------------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------------------------*/	
bloqueComandos ::=  bloqueComandos expreAritmeticas
				   |expreAritmeticas
                   |controlFlujo 
				   |bloqueComandos expresionesLogicas
                   |expresionesLogicas

				   
;

controlFlujo ::=  controlFlujo if_then 
                  |if_then
				  |controlFlujo if_then_else
				  |if_then_else
				  |controlFlujo while_do
				  |while_do
				  |controlFlujo do_while
				  |do_while
          ;
/*
if_then ::= IF PARENIZQ expresionesLogicas PARENDER THEN;

if_then_else ::= IF PARENIZQ expresionesLogicas PARENDER THEN ELSE  ; 

while_do ::=  WHILE PARENIZQ expresionesLogicas PARENDER DO;

do_while ::= DO WHILE PARENIZQ expresionesLogicas  PARENDER;
*/

if_then ::= IF PARENIZQ expresionesLogicas PARENDER THEN llaveIZQ expreAritmeticas llaveDER;

if_then_else ::= IF PARENIZQ expresionesLogicas PARENDER THEN llaveIZQ expreAritmeticas llaveDER ELSE llaveIZQ expreAritmeticas  llaveDER  ; 

while_do ::=  WHILE PARENIZQ expresionesLogicas PARENDER DO llaveIZQ expreAritmeticas  llaveDER;

do_while ::= DO llaveIZQ expreAritmeticas llaveDER WHILE PARENIZQ expresionesLogicas  PARENDER;




//if (expresi贸n) then comando
//if (expresi贸n) then comando else comando
//while (expresi贸n) do comando
//do comando while (expresi贸n)

/*------------------------------------------------------------------------------------------------------------*/
//Expresiones logicas, son las que dan como resultado true o false 9>=3 o expresionAritm > expresionAritmetica
//se puede crear expresiones logicas con operadores relacionales de forma recursiva


expresionesLogicas ::= IDENTIFICADOR oprdrsComparacion IDENTIFICADOR 
                       |NUMFLOAT oprdrsComparacion NUMFLOAT
				       |INTEGERP oprdrsComparacion INTEGERP
					   |expreAritmeticas oprdrsComparacion  expreAritmeticas 
					   ;

/*-----------------------------------------------------------------------------------------------------------*/	
//Expresiones Aritmeticas

expreAritmeticas ::= expresionSuma //expresionMult
                       ;
//Se separa la suma de la resta, debido a que en CUP, podemos asignar presedencia a los signos de puntuacion


expresionSuma ::=  IDENTIFICADOR OperadorSR IDENTIFICADOR
                    |NUMFLOAT OperadorSR NUMFLOAT
				    |INTEGERP OperadorSR INTEGERP
				    |OPcompuesto OperadorSR OPcompuesto
					|INTEGERP OperadorSR OPcompuesto
					|OPcompuesto OperadorSR INTEGERP
					|NUMFLOAT OperadorSR OPcompuesto
					|OPcompuesto OperadorSR NUMFLOAT


;

OPcompuesto ::= PARENIZQ  crpOperadoComp  PARENDER
                ;

				
crpOperadoComp ::= |NUMFLOAT OperadorSR NUMFLOAT
				   |INTEGERP OperadorSR INTEGERP 				   
;

expresionMult ::=  IDENTIFICADOR OperadorMD IDENTIFICADOR
                    |NUMFLOAT OperadorMD NUMFLOAT
				    |INTEGERP OperadorMD INTEGERP
				    |OPcompuestoMD OperadorMD OPcompuestoMD
					|INTEGERP OperadorMD OPcompuestoMD
					|OPcompuestoMD OperadorMD INTEGERP
					|NUMFLOAT OperadorMD OPcompuestoMD
					|OPcompuestoMD OperadorMD NUMFLOAT
					


;

OPcompuestoMD ::= PARENIZQ  crpOperadoCompMD  PARENDER
                ;

				
crpOperadoCompMD ::= |NUMFLOAT OperadorMD NUMFLOAT
				   |INTEGERP OperadorMD INTEGERP 				   
;



/*-----------------------------------------------------------------------------------------------------------*/	








variableGlobal1  ::= tipovariableNUM DOSPUNTOS IDENTIFICADOR IGUAL CERO SEMI;

vGlobalVector ::=  tipovariableNUM DOSPUNTOS IDENTIFICADOR corchIZQ INTEGERP corchDER IGUAL CERO SEMI;

variableGlobal2  ::= tipovariableCAD DOSPUNTOS IDENTIFICADOR  SEMI;

vGlobalVectorCAD ::=  tipovariableCAD DOSPUNTOS IDENTIFICADOR corchIZQ INTEGERP corchDER  SEMI;

tipovariableNUM ::=  INT
                |FLOAT

;

tipovariableCAD ::=   CHAR 
				|BOOL
				|STRING;
				
				
OperadorSR ::=  OP_SUMA
                |OP_RESTA

;

OperadorMD ::=  OP_MULT
               
;

oprdrsComparacion ::=  MAY_IGUAL 
                      |MENOR_IGUAL 
					  |IGUAL_IGUAL 
					  |DIFERENT
					  ;

		







 
   
   
  