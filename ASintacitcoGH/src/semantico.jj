PARSER_BEGIN(semantico)
import java.io.*;
class semantico
{
	public static void main( String[] args )throws ParseException, Exception
	{
		try
		{
		    File fe = new File("archivo.txt");
			BufferedReader entrada;

			entrada = new BufferedReader(new FileReader(fe));
		
     		semantico analizador = new semantico(entrada) ;
			analizador.Programa();
			System.out.println("\t =>**** Fin del Analisis **** <=.");
            			
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\t =>**** Fin del Analisis **** <=.");
		    System.out.println("\t =>**** Hubo algun problema con el archivo de entrada **** <=.");
		}
		
		TokenAsignaciones.MostrarTablaSimbolos();
		TokenAsignaciones.MostrarTablaFunciones();
	}
}
PARSER_END(semantico)

TOKEN : 
{ 
	  <IGUAL : "=">  //1
	| <MAS : "+" >  //2
	| <MENOS:"-">  //3
	| <POR:"*"> //4
	| <DIVIDE:"/">  //5
	
}
TOKEN:
{
	  <PUBLIC: "public"> //6
	| <PRIVATE: "private"> //7
	| <STATIC: "static"> //8
	| <VOID: "void"> //9
	| <MAIN: "void Main()"> //10
	| <PROGRAMA: "Programa" >  //11
	| <IF: "if" > //12
	| <THEN:"then" > //13
	| <ELSE:"else" > //14
	| <DO:"do" > //15
	| <WHILE:"while" > //16
	| <WRITE:"output" > //17
	| <READ:"input" > //18
	| <RETURN:"return" > //19
	
}
TOKEN:
{
      <PARIZQ: "(" > //20
	| <PARDER: ")" > //21
	| <LLAVEIZQ: "{" > //22
	| <LLAVEDER: "}" > //23
	| <CORIZQ: "[" > //24
	| <CORDER: "]" > //25
	| <PUNTOYCOMA: ";" > //26
	| <COMA: "," > //27
	| <COMILLAS: "\""> //28
	| <EXCLAMACION: "!"> //29
	| <AMP: "&"> //30
	| <DINERO: "$"> //31
}
TOKEN:
{
	  <IGUALIGUAL: "==" > //32
	| <MENORIGUAL: "<=" > //33
	| <MENOR: "<" > //34
	| <MAYORIGUAL: ">=" > //35
	| <MAYOR: ">" > //36
	| <DIFERENTE: "!=" > //37
	| <OR: "||" > //38
	| <AND: "&&"> //39
}

TOKEN:
{
	  <INT:"int"> //40
	| <FLOAT: "float"> //41
	| <CHAR: "char"> //42
	| <STRING: "string"> //43
	| <BOOL: "bool"> //44
	| <NUMERO : ("-")?(["1"-"9"])+ | "0">  //45
	| <BOOLEANO : "true" | "false"> //46
	| <IDENTIFICADOR : ["a"-"z"](["a"-"z"])*>  //47
	| <DECIMAL : <NUMERO>["."](["0"-"9"])+ > //48
	| <CADENA : <COMILLAS>(~[])*<COMILLAS>> //49
	| <CARACTER : "'"(~[])"'" >//50
	| <DOSPUNTOS : ":"> //51
}

SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
	//ignora comentarios
	|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  	|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

//Declaracion de la estructura general del programa
void Programa() :
{}
{
<PROGRAMA><IDENTIFICADOR><LLAVEIZQ>Cuerpo()<LLAVEDER><EOF>	
	
	//Cuerpo() <EOF>
}
//Declaracion del cuerpo del programa
void Cuerpo():
{
  TokenAsignaciones.SetTables();	
  }
{
 ( VariablesGlobales())* Principal() (Implementa_Funciones())* 
} 
//Declaracion de las variables en general
void VariablesGlobales():
{
  int intTD;
Token tok_var; }
{
(TiposDatos()	{intTD = token.kind;})<DOSPUNTOS> tok_var=<IDENTIFICADOR> { tok_var= new Token (intTD, tok_var.image);}
	( vector(tok_var)
	|dec_glob(tok_var) 
	|funcion(tok_var))
}

//Declaracion de vectores
void vector(Token tok_var):
{}
{
  {TokenAsignaciones.insertarSimbolo(tok_var,tok_var);}
<CORIZQ> <NUMERO> <CORDER> <PUNTOYCOMA>
}

//Declaracion de varibles globales
void dec_glob(Token tok_var):
{Token par;}
{
 {TokenAsignaciones.insertarSimbolo(tok_var,tok_var);}
(<COMA>par=< IDENTIFICADOR >{TokenAsignaciones.insertarSimbolo(par,tok_var);})* <PUNTOYCOMA>
}

//Declaracion Funciones
void funcion(Token tok_var):
{int intTD;
 Token par;}
{ < PARIZQ >
{ TokenAsignaciones.insertarFuncion(tok_var);}
((TiposDatos(){intTD = token.kind;})
	< DOSPUNTOS > par=< IDENTIFICADOR >{ par= new Token (intTD, par.image); TokenAsignaciones.insertarParametros(tok_var,par); }
|< COMA > (TiposDatos(){intTD = token.kind;}) < DOSPUNTOS >par=< IDENTIFICADOR >{ par= new Token (intTD, par.image);
 TokenAsignaciones.insertarParametros(tok_var,par); } )*< PARDER > < PUNTOYCOMA > 
 	
}

//Parte inicial de las declaraciones
Token tok_var():
{int intTD;
  Token tok_var;	
}
{   (TiposDatos())
	{
	  intTD = token.kind;
	}
	<DOSPUNTOS> tok_var=<IDENTIFICADOR>
	{
	  tok_var= new Token (intTD,tok_var.image);
	}
	 
{ return tok_var;}
}

//Parametros de las funciones
Token parametros():
{Token par=null;}
{ (par=tok_var()
| < COMA > par=tok_var())*
{ return par;}
}

//definicin de main
void Principal():
{}
{
	<MAIN>
	<LLAVEIZQ> Sentencias() <LLAVEDER> 	
}

// Implementacion de las funciones
void Implementa_Funciones():
{int t1,t2;
Token tok_var,par; }
{
(TiposDatos(){t1 = token.kind;}
   <DOSPUNTOS> tok_var=<IDENTIFICADOR> { tok_var= new Token (t1, tok_var.image);}< PARIZQ >
{ TokenAsignaciones.verificarFuncion1(tok_var);})
((TiposDatos(){t2 = token.kind;})< DOSPUNTOS > par=< IDENTIFICADOR >{ par= new Token (t2, par.image); TokenAsignaciones.verificarFuncion2(tok_var,par); }
|< COMA > (TiposDatos(){t2 = token.kind;})< DOSPUNTOS >par=< IDENTIFICADOR >
{ par= new Token (t2, par.image); TokenAsignaciones.verificarFuncion2(tok_var,par); } )* < PARDER > 
 cuerpo_Fun(tok_var)
}

//Cuerpo de las funciones
void cuerpo_Fun(Token tok_var):
{
  Token nombre_Fun;
}
{
  < LLAVEIZQ > Sentencias() < RETURN > nombre_Fun =< IDENTIFICADOR > < PUNTOYCOMA >  < LLAVEDER > 
}

//Variables locales 
void VariablesLocales():
{
	int intTD;
	Token tok_var;	
}
{
(
	(TiposDatos())
	{
	  intTD = token.kind;
	}
	<DOSPUNTOS> tok_var = <IDENTIFICADOR> 
	{		
		//TokenAsignaciones.InsertarSimbolo(tok_var, intTD);
	} 
	[VariablesAsignacion(tok_var)]
	(
		<COMA>
		tok_var = <IDENTIFICADOR> 
		{		
			//TokenAsignaciones.InsertarSimbolo( tok_var, intTD);
		} 
		[VariablesAsignacion(tok_var)]
	)*	
	<PUNTOYCOMA> 
)
	(VS())
}

// Definicion de las variables de asignacion
void VariablesAsignacion(Token v1):
{
	Token v2;
	Token v3;
	String res;	
	boolean imp = false;
}
{
	<IGUAL>
	(TiposAsignaciones())
	  {  
		v2 = token;
		TokenAsignaciones.induccion_var(v1, v2);
		
		//res = TokenAsignaciones.checkAsing(v1, v2);
		//if(res != " "){System.out.println(res);imp = true;}
		
		
	  }
	  (OpAritmetico()
	  TiposAsignaciones()
	  {  
		v3 = token;
		TokenAsignaciones.induccion_var(v1, v3);
		//res = TokenAsignaciones.checkAsing(v1, v3);
		//if(res != " " && !imp){System.out.println(res);}
	  })*
}

void VS():
{}
{
	LOOKAHEAD(3)VariablesLocales() | Sentencias()
}

// definicion de las sentencias que se pueden realizar en las funciones
void Sentencias():
{}
{
	(	
	  VariablesLocales()	
    | SentenciaIf() 
	| SentenciaDo()	
	| LOOKAHEAD(2)SentenciaAsignacion()<PUNTOYCOMA>{TokenAsignaciones.segunda = 0;}
	| SentenciaWrite()
	| SentenciaRead()<PUNTOYCOMA>
	)*
}

//tipos de datos de los identificadores, vectores y funciones
void TiposDatos():
{}
{
	 <INT>
	|<FLOAT>
	|<STRING>
	|<CHAR>
	|<BOOL>
}


// IF
void SentenciaIf():
{}
{
	<IF><PARIZQ> A() <PARDER> <THEN > <LLAVEIZQ> Sentencias() <LLAVEDER> (Sino())* 
}
void Sino():
{}
{
	<ELSE><LLAVEIZQ> Sentencias() <LLAVEDER>
}

void A():
{}
{
	  Comparaciones() ([(<AND>|<OR>)] Comparaciones())*
}

// Definicion de Comparaciones posibles
void Comparaciones():
{}
{
	Valor()Operadores()Valor()
}

void Valor():
{}
{
	LOOKAHEAD(2) (<IDENTIFICADOR> | <NUMERO>) | Expresion()
}
void Expresion():
{}
{
    LOOKAHEAD(2)(<NUMERO> | <IDENTIFICADOR>)
	|(<IDENTIFICADOR>|<NUMERO>) OpAritmetico() (<IDENTIFICADOR>|<NUMERO>) 
}

void Operadores():
{}
{
	    <IGUALIGUAL> 
	  | <MENORIGUAL> 
	  | <MAYORIGUAL> 
	  | <DIFERENTE> 
	  | <MAYOR> 
	  | <MENOR> 
}

//Definicion de operadores aritmeticos
int OpAritmetico():
{}
{
	  (<MAS> {return 1;})
	| (<MENOS> {return 1;})
	| (<POR> {return 1;})
	| (<DIVIDE> {return 1;})
	| ({return 0;})
	
	{return 0;}
}



//DO
void SentenciaDo():
{}
{
	<DO> <LLAVEIZQ>Sentencias() <LLAVEDER> <WHILE> <PARIZQ> Comparaciones() <PARDER> <PUNTOYCOMA>
		
}

//WHILE
void SentenciaWhile():
{}
{
	<WHILE> <PARIZQ> Comparaciones() <PARDER> <DO> <LLAVEIZQ> Sentencias() <LLAVEDER>
}

// ASIGN
void SentenciaAsignacion():
{
	Token v1;
	Token v2;
	Token v3;
	int aux;
	String res;
	boolean imp = false;
}
{
  v1 = <IDENTIFICADOR> (<IGUAL>(TiposAsignaciones())
  {  
    v2 = token;
	TokenAsignaciones.induccion_var(v1, v2);
	
	//res = TokenAsignaciones.checkAsing(v1, v2);
	//if(res != " "){System.out.println(res);imp = true;}
	
	
  }
  (LOOKAHEAD(2)OpAritmetico()TiposAsignaciones()
  {  
    v3 = token;
	TokenAsignaciones.induccion_var(v1, v3);
	
	//res = TokenAsignaciones.checkAsing(v1, v3);
	//if(res != " " && !imp){System.out.println(res);}
	
  })*  
  )
  
  
}

// Definicion de tipos de asignaciones
void TiposAsignaciones():
{}
{
	  <IDENTIFICADOR> 
	| <NUMERO> 
	| <DECIMAL> 
	| <CADENA> 
	| <CARACTER>
	| < BOOLEANO > 
}


// WRITE
void SentenciaWrite():
{}
{
	<WRITE> <PARIZQ> (Expresion()(<MAS><CADENA>)*|<CADENA>(<MAS>Expresion())*)* <PARDER> <PUNTOYCOMA> 
}

// READ
void SentenciaRead():
{}
{
	<READ><PARIZQ><PARDER>
}